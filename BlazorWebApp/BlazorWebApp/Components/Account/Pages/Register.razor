@page "/Account/Register"
@rendermode InteractiveServer



<PageTitle>Sign up</PageTitle>



<section id="signup">
    <div class="container">
        
        <EditForm FormName="signupform" Model="SignUpForm" OnValidSubmit="OnValidSubmit" asp-route-returnUrl="@ReturnUrl" method="post"  novalidate>
            <DataAnnotationsValidator />
            @if (!string.IsNullOrEmpty(StatusMessage))
            {
                <div class="error-msg">
                    @StatusMessage
                </div>
            }
            <h1>Create Account</h1>
            <p>Already have an account? <a href="/account/login">Sign in here</a>.</p>

            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>First name</label>
                    <InputText @bind-Value="SignUpForm.FirstName" />
                    <ValidationMessage For="() => SignUpForm.FirstName" />
                </div>
                <div id="form-lastname" class="input-group">
                    <label>Last name</label>
                    <InputText @bind-Value="SignUpForm.LastName" />
                    <ValidationMessage For="() => SignUpForm.LastName" /> 
                </div>
                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <InputText @bind-Value="SignUpForm.Email" type="email" />
                    <ValidationMessage For="() => SignUpForm.Email" />
                </div>
                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText @bind-Value="SignUpForm.Password" type="password" />
                    <ValidationMessage For="() => SignUpForm.Password" />
                </div>
                <div id="form-confirm" class="input-group">
                    <label>Confirm password</label>
                    <InputText @bind-Value="SignUpForm.ConfirmPassword" type="password" />
                    <ValidationMessage For="() => SignUpForm.ConfirmPassword" />
                </div>
                <label class="checkbox-box">
                    <InputCheckbox @bind-Value="SignUpForm.TermsAndConditions" />
                    <span class="min-checkmark"></span>
                    <p>I agree to the <a href="#">Terms</a> & <a href="#">Conditions</a>.</p>
                </label>
                <ValidationMessage For="() => SignUpForm.TermsAndConditions" />

                <button id="form-submit" class="btn-theme-s" type="submit">Sign up</button>
            </div>
        </EditForm>

    </div>
</section>



@code {
    [SupplyParameterFromQuery]
    private string StatusMessage { get; set; } = "";

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private SignUpFormModel SignUpForm { get; set; } = new();

    public async Task OnValidSubmit(EditContext editContext)
    {
        var user = new ApplicationUser
        {
            UserProfile = new UserProfile
            {
                FirstName = SignUpForm.FirstName,
                LastName = SignUpForm.LastName
            },
            UserName = SignUpForm.Email,
            Email = SignUpForm.Email
        };

        try
        {

            var alreadyExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
            if (alreadyExists != null)
            {
                StatusMessage = "An account with this email address already exists.";
                return;
            }

            var result = await UserManager.CreateAsync(user, SignUpForm.Password);
            if (!result.Succeeded)
            {
                StatusMessage = "Unable to register account. Please try again.";
                return;
            };
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occurred while creating the account.";
            return;
        }

        await http.PostAsJsonAsync("", SignUpForm); //lägg till confirmation email url'en här!!


        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = user.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
        
    }

   

    public class SignUpFormModel
    {
        [DataType(DataType.Text)]
        [Display(Name = "First name", Prompt = "Your first name")]
        [Required(ErrorMessage = "A valid first name is required")]
        public string FirstName { get; set; } = null!;



        [DataType(DataType.Text)]
        [Display(Name = "Last name", Prompt = "Your last name")]
        [Required(ErrorMessage = "A valid last name is required")]
        public string LastName { get; set; } = null!;



        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email name", Prompt = "Your email")]
        [Required(ErrorMessage = "A valid email adress is required")]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email")]
        public string Email { get; set; } = null!;



        [DataType(DataType.Password)]
        [Display(Name = "Password", Prompt = "Your password")]
        [Required(ErrorMessage = "A password is required")]
        [RegularExpression(@"^(?=.*[A-Z])(?=.*[\W_]).{8,}$", ErrorMessage = "Invalid password")]
        public string Password { get; set; } = null!;



        [DataType(DataType.Password)]
        [Display(Name = "Confirm password", Prompt = "Confirm your password")]
        [Required(ErrorMessage = "Password must be confirmed")]
        [Compare(nameof(Password), ErrorMessage = "Password must be confirmed")]
        public string ConfirmPassword { get; set; } = null!;



        
        [Display(Name = "I agree to the Terms & Conditions.", Prompt = "Terms and Conditions")]
        public bool TermsAndConditions { get; set; }
    }

}




























