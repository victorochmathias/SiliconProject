@page "/account/details"
@using System.Security.Claims
@using BlazorWebApp.Services

@inject SignInManager<ApplicationUser> SignInManager
@inject IServiceProvider ServiceProvider
@attribute [StreamRendering]

<section class="account-details">
    <div class="container">
        <aside>
            <div class="profile">
                <div class="profile-image">
                    <img src="/images/profile-image.svg" alt="" />
                    <form enctype="multipart/form-data" method="post" asp-action="UploadImage" asp-controller="Account">
                        <input id="uploadFile" type="file" name="file" hidden />
                        <label for="uploadFile" class="btn-white-circle"><i class="fa-regular fa-refresh"></i></label>
                    </form>
                </div>
                <div class="profile-info">
                    @if (user == null)
                    {
                        <p>Loading...</p>
                    }
                    else
                    {
                        <h3>@userProfile.FirstName @userProfile.LastName</h3>
                        <p>@user.Email</p>
                    }
                </div>
            </div>
            <nav>
                <NavLink id="nav-settings" class="btn-nav" href="/account/details"><i class="fa-regular fa-gear"></i><span>Account Details</span></NavLink>
                <NavLink id="nav-security" class="btn-nav" href="/account/security"><i class="fa-regular fa-lock"></i><span>Security</span></NavLink>
                <NavLink id="nav-security" class="btn-nav" href="/account/notifications"><i class="fa-regular fa-bell"></i><span>Notifications</span></NavLink>
                <NavLink id="nav-bookmark" class="btn-nav" href="/account/savedcourses"><i class="fa-regular fa-bookmark"></i><span>Saved Courses</span></NavLink>
                <NavLink id="nav-signout" class="btn-nav" href="#"><i class="fa-regular fa-arrow-right-from-bracket"></i><span>Sign Out</span></NavLink>
            </nav>
        </aside>
        <div class="account-information">
            <EditForm class="basicinfo-form" FormName="basicinfoform" Model="BasicInfoForm" OnValidSubmit="OnValidSubmit" asp-route-returnUrl="@ReturnUrl" method="post" novalidate>
                <DataAnnotationsValidator />
                <h1>Account Details</h1>
                <h5>Basic Info</h5>
                <div class="form-content">
                    <div id="form-firstname" class="input-group">
                        <label>First name</label>
                        <ValidationMessage For="() => BasicInfoForm.FirstName" />
                        <InputText @bind-Value="BasicInfoForm.FirstName" />
                    </div>
                    <div id="form-lastname" class="input-group">
                        <label>Last name</label>
                        <ValidationMessage For="() => BasicInfoForm.LastName" />
                        <InputText @bind-Value="BasicInfoForm.LastName" />
                    </div>
                    <div id="form-email" class="input-group">
                        <label>Email</label>
                        <ValidationMessage For="() => BasicInfoForm.Email" />
                        <InputText @bind-Value="BasicInfoForm.Email" />
                    </div>
                    <div id="form-phone" class="input-group">
                        <label>Phone number</label>
                        <ValidationMessage For="() => BasicInfoForm.PhoneNumber" />
                        <InputText @bind-Value="BasicInfoForm.PhoneNumber" />
                    </div>
                    <div id="form-bio" class="input-group">
                        <label>Bio</label>
                        <textarea @bind="BasicInfoForm.Biography" placeholder="Enter text here"></textarea>
                        <ValidationMessage For="() => BasicInfoForm.Biography" />
                    </div>
                    <div class="my-buttons">
                        <button id="btn-info-reset" class="btn-gray" type="reset">Cancel</button>
                        <button id="btn-info-submit" class="btn-theme" type="submit">Save changes</button>
                    </div>
                    @if (!string.IsNullOrEmpty(StatusMessage))
                    {
                        <div class="confirm-msg">
                            @StatusMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(ErrorStatusMessage))
                    {
                        <div class="error-msg">
                            @ErrorStatusMessage
                        </div>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</section>

@code {
    private ApplicationUser user = default!;
    private UserProfile userProfile = default!;

    [SupplyParameterFromQuery]
    private string StatusMessage { get; set; } = "";

    [SupplyParameterFromQuery]
    private string ErrorStatusMessage { get; set; } = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private BasicInfoFormModel BasicInfoForm { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using (var scope = ServiceProvider.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            var userService = scope.ServiceProvider.GetRequiredService<UserService>();

            user = await userManager.GetUserAsync(HttpContext.User) ?? null!;
            userProfile = await userService.GetUserProfileAsync(user.UserProfileId!);
        }
    }

    public async Task OnValidSubmit(EditContext editContext)
    {
        var userprofile = new BasicInfoFormModel
            {
                FirstName = BasicInfoForm.FirstName,
                LastName = BasicInfoForm.LastName,
                Email = BasicInfoForm.Email,
                PhoneNumber = BasicInfoForm.PhoneNumber,
                Biography = BasicInfoForm.Biography
            };

        var result = await UserService.UpdateUserDetailsAsync(user.Id, userprofile);
        if (result)
            StatusMessage = "User successfully updated.";
        else 
            ErrorStatusMessage = "Error, please try again.";

        //uppdatera användaren på något vis.....
    }

    public class BasicInfoFormModel
    {
        public string UserId { get; set; } = null!;

        [Required(ErrorMessage = "A valid first name is required")]
        [DataType(DataType.Text)]
        [Display(Name = "First name", Prompt = "Enter your first name")]
        public string FirstName { get; set; } = null!;

        [Required(ErrorMessage = "A valid last name is required")]
        [DataType(DataType.Text)]
        [Display(Name = "Last name", Prompt = "Enter your last name")]
        public string LastName { get; set; } = null!;

        [Required(ErrorMessage = "A valid email is required")]
        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email", Prompt = "Enter your email")]
        public string Email { get; set; } = null!;

        [DataType(DataType.PhoneNumber)]
        [Display(Name = "Phone (optional)", Prompt = "Enter your phone number")]
        public string? PhoneNumber { get; set; }

        [DataType(DataType.MultilineText)]
        [Display(Name = "Bio (optional)", Prompt = "Add a short bio...)")]
        public string? Biography { get; set; }
    }
}